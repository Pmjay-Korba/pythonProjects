import sqlite3

from EHOSP.ehospital_proper.colour_print_ehosp import ColourPrint


def list_tables():
    conn = sqlite3.connect(r'G:\My Drive\GdrivePC\Hospital\RSBY\New\incentiveDatabase_2.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    for table in tables:
        print(table[0])
    conn.close()


def sql_update(case_number_text, status_text, procedure_text, last_updated_text, list_of_list):
    # Connect to SQLite database
    SQL_PATH = r'G:\My Drive\GdrivePC\Hospital\RSBY\New\incentiveDatabase_2.db'
    conn = sqlite3.connect(SQL_PATH)
    cursor = conn.cursor()

    # Step 1: Insert case number and retrieve its ID
    cursor.execute('''
        INSERT INTO case_num_t (case_number, updated_time, inc_procedure, inc_status)
        SELECT ?, ?, ?, ?
        WHERE NOT EXISTS (SELECT 1 FROM case_num_t WHERE case_number = ?)
        ''', (case_number_text, last_updated_text, procedure_text, status_text, case_number_text))
    conn.commit()

    cursor.execute('SELECT id_case_num, updated_time FROM case_num_t WHERE case_number = ?', (case_number_text,))
    result = cursor.fetchone()
    case_num_id = result[0]

    # Step 2: Delete old records if they exist
    cursor.execute('DELETE FROM distribution_t WHERE d_case_num = ?', (case_num_id,))
    conn.commit()

    # Step 3: Prepare to insert new records
    distribution_data = []
    for entry in list_of_list:
        category_number = entry[0]
        employee_code = entry[1]
        incentive_amount = entry[2]

        # Retrieve employee ID from emp_detail_t using employee_code
        cursor.execute('SELECT SN FROM emp_detail_t WHERE code_emp = ?', (employee_code,))
        emp_id = cursor.fetchone()
        if not emp_id:
            raise ValueError(f"Employee with code {employee_code} not found in emp_detail_t.")
        emp_id = emp_id[0]

        # Prepare data for batch insertion
        distribution_data.append((case_num_id, category_number, emp_id, incentive_amount))

    # Insert data into distribution_t in a single transaction
    cursor.executemany('''
        INSERT INTO distribution_t (d_case_num, d_emp_categ, d_emp_code, d_inc_amt)
        VALUES (?, ?, ?, ?)
        ''', distribution_data)
    conn.commit()

    # Step 4: Update the updated_time, inc_procedure, and inc_status in case_num_t
    cursor.execute('''
        UPDATE case_num_t 
        SET updated_time = ?, inc_procedure = ?, inc_status = ?
        WHERE case_number = ?
        ''', (last_updated_text, procedure_text, status_text, case_number_text))
    conn.commit()

    # Close the connection
    conn.close()

def sql_update_bulk_optimized(success_list):
    """
    success_list: List of tuples like:
    [
        (case_number, status_text, last_updated_text, procedure_text, list_of_list),
        ('CASE/PS6/HOSP22G146659/CK7323852', 'Hospital Initiated', '12/07/2025 23:20:05', 'SICS with non-foldable IOL', [[1, '11170010478', '3.16'], [1, '66170010344', '3.16'], [1, '04170140656', '3.16'], [1, '09530010327', '3.16'], [1, '02530010055', '3.16'], [1, '04170140099', '3.16'], [1, '66170010023', '3.16'], [2, '05170011289', '15.47'], [2, '05170040053', '15.47'], [2, 'DME55173201', '15.47'], [2, '05530010026', '15.47'], [2, '05530010031', '15.47'], [2, '05530010065', '15.47'], [2, '05530010079', '15.47'], [2, 'DME55172439', '15.47'], [2, '04170140518', '15.47'], [2, '05530010013', '15.47'], [2, 'DME55172441', '15.47'], [2, 'DME55173188', '15.47'], [2, 'DME55173185', '15.47'], [2, '05530010029', '15.47'], [3, '04170150173', '2.49'], [3, 'J55172863', '2.49'], [3, 'N5517593', '2.49'], [3, '05170010396', '2.49'], [3, '05170020193', '2.49'], [3, '05170020054', '2.49'], [3, 'AI55170024', '2.49'], [3, 'AI55170030', '2.49'], [3, '03170010366', '2.49'], [3, '05170020117', '2.49'], [3, '05170060099', '2.49'], [3, '06170050083', '2.49'], [3, '07170021387', '2.49'], [3, '09170010257', '2.49'], [3, '09530010377', '2.49'], [3, '05170011797', '2.49'], [4, '05170020187', '198.9'], [4, '05170020043', '198.9'], [4, '05170020182', '198.9'], [4, '05530010028', '198.9'], [4, '05530010030', '198.9'], [7, '15170200084', '2.65'], [7, '19170040056', '2.65'], [7, 'AI55170022', '2.65'], [7, 'AI55170026', '2.65'], [7, 'N5517599', '2.65'], [7, '05170020059', '2.65'], [7, '06170010814', '2.65'], [7, '02170280014', '2.65'], [7, '11170010433', '2.65'], [7, 'N5517866', '2.65'], [7, '05170020063', '2.65'], [7, '66170010273', '2.65'], [7, '66170020530', '2.65'], [7, '66170020641', '2.65'], [7, '66170020668', '2.65'], [7, '66170020533', '2.65'], [7, '66170020614', '2.65'], [7, '05170020133', '2.65'], [7, '04170120033', '2.65'], [7, 'N5517809', '2.65'], [7, 'N5517860', '2.65'], [7, 'N0517353', '2.65'], [7, 'N5517515', '2.65'], [7, '04170060068', '2.65'], [7, '04170140331', '2.65'], [7, '04170140436', '2.65'], [7, '04170140447', '2.65'], [7, '04170150162', '2.65'], [7, '05170020124', '2.65'], [7, '05170020142', '2.65'], [7, '05170020143', '2.65'], [7, '05170020150', '2.65'], [7, '05170020153', '2.65'], [7, '05170020161', '2.65'], [7, '05170020178', '2.65'], [7, '05170040078', '2.65'], [7, '08170040064', '2.65'], [7, '09170160077', '2.65'], [7, '12170050188', '2.65'], [7, '14170011702', '2.65'], [7, '15170200036', '2.65'], [7, '15170200090', '2.65'], [7, '22170040038', '2.65'], [7, '05170050074', '2.65'], [7, '0617009003', '2.65'], [7, '23170020062', '2.65'], [7, 'N5517989', '2.65'], [7, 'N5517990', '2.65'], [7, '05170011626', '2.65'], [7, '04170140534', '2.65'], [8, 'N5517032', '1.51'], [8, 'N5517042', '1.51'], [8, 'N5517056', '1.51'], [8, 'N5517083', '1.51'], [8, 'N5517084', '1.51'], [8, 'N5517085', '1.51'], [8, 'N55171003', '1.51'], [8, 'N5517136', '1.51'], [8, 'N5517028', '1.51'], [8, 'N5517055', '1.51'], [8, 'N5517610', '1.51'], [8, 'N5517613', '1.51'], [8, 'N5517614', '1.51'], [8, 'N5517615', '1.51'], [8, 'N5517073', '1.51'], [8, 'N5517589', '1.51'], [8, '05170020095', '1.51'], [8, 'N5517857', '1.51'], [8, '05170020131', '1.51'], [8, '05170020137', '1.51'], [8, '05170020184', '1.51'], [8, '05170020189', '1.51'], [8, '05170020097', '1.51'], [8, '05170020098', '1.51'], [8, '05170020099', '1.51'], [8, '05170020100', '1.51'], [8, '04170150035', '1.51'], [8, '04170150084', '1.51'], [8, '05170020082', '1.51'], [8, '05170020084', '1.51'], [8, '05170020086', '1.51'], [8, '05170020087', '1.51'], [8, '05170020091', '1.51'], [8, '05170020092', '1.51'], [8, '07170250399', '1.51'], [8, '07170250453', '1.51'], [8, '04170150044', '1.51'], [8, '05170020088', '1.51'], [8, '05170020090', '1.51'], [8, '05170020093', '1.51'], [8, '05170020103', '1.51'], [8, '05170020105', '1.51'], [8, '05170020107', '1.51'], [8, '05170020110', '1.51'], [9, 'J55172798', '15.79'], [9, 'J55173309', '15.79'], [9, 'DME55173036', '15.79'], [9, 'DME55173037', '15.79'], [9, 'DME55173200', '15.79'], [9, 'N5517569', '15.79'], [9, '05170020166', '15.79']]),
        ('CASE/PS6/HOSP22G146659/CK7323811', 'Hospital Initiated', '12/07/2025 23:18:38', 'SICS with non-foldable IOL', [[1, '11170010478', '3.16'], [1, '66170010344', '3.16'], [1, '04170140656', '3.16'], [1, '09530010327', '3.16'], [1, '02530010055', '3.16'], [1, '04170140099', '3.16'], [1, '66170010023', '3.16'], [2, '05170011289', '15.47'], [2, '05170040053', '15.47'], [2, 'DME55173201', '15.47'], [2, '05530010026', '15.47'], [2, '05530010031', '15.47'], [2, '05530010065', '15.47'], [2, '05530010079', '15.47'], [2, 'DME55172439', '15.47'], [2, '04170140518', '15.47'], [2, '05530010013', '15.47'], [2, 'DME55172441', '15.47'], [2, 'DME55173188', '15.47'], [2, 'DME55173185', '15.47'], [2, '05530010029', '15.47'], [3, '04170150173', '2.49'], [3, 'J55172863', '2.49'], [3, 'N5517593', '2.49'], [3, '05170010396', '2.49'], [3, '05170020193', '2.49'], [3, '05170020054', '2.49'], [3, 'AI55170024', '2.49'], [3, 'AI55170030', '2.49'], [3, '03170010366', '2.49'], [3, '05170020117', '2.49'], [3, '05170060099', '2.49'], [3, '06170050083', '2.49'], [3, '07170021387', '2.49'], [3, '09170010257', '2.49'], [3, '09530010377', '2.49'], [3, '05170011797', '2.49'], [4, '05170020187', '198.9'], [4, '05170020043', '198.9'], [4, '05170020182', '198.9'], [4, '05530010028', '198.9'], [4, '05530010030', '198.9'], [7, '15170200084', '2.65'], [7, '19170040056', '2.65'], [7, 'AI55170022', '2.65'], [7, 'AI55170026', '2.65'], [7, 'N5517599', '2.65'], [7, '05170020059', '2.65'], [7, '06170010814', '2.65'], [7, '02170280014', '2.65'], [7, '11170010433', '2.65'], [7, 'N5517866', '2.65'], [7, '05170020063', '2.65'], [7, '66170010273', '2.65'], [7, '66170020530', '2.65'], [7, '66170020641', '2.65'], [7, '66170020668', '2.65'], [7, '66170020533', '2.65'], [7, '66170020614', '2.65'], [7, '05170020133', '2.65'], [7, '04170120033', '2.65'], [7, 'N5517809', '2.65'], [7, 'N5517860', '2.65'], [7, 'N0517353', '2.65'], [7, 'N5517515', '2.65'], [7, '04170060068', '2.65'], [7, '04170140331', '2.65'], [7, '04170140436', '2.65'], [7, '04170140447', '2.65'], [7, '04170150162', '2.65'], [7, '05170020124', '2.65'], [7, '05170020142', '2.65'], [7, '05170020143', '2.65'], [7, '05170020150', '2.65'], [7, '05170020153', '2.65'], [7, '05170020161', '2.65'], [7, '05170020178', '2.65'], [7, '05170040078', '2.65'], [7, '08170040064', '2.65'], [7, '09170160077', '2.65'], [7, '12170050188', '2.65'], [7, '14170011702', '2.65'], [7, '15170200036', '2.65'], [7, '15170200090', '2.65'], [7, '22170040038', '2.65'], [7, '05170050074', '2.65'], [7, '0617009003', '2.65'], [7, '23170020062', '2.65'], [7, 'N5517989', '2.65'], [7, 'N5517990', '2.65'], [7, '05170011626', '2.65'], [7, '04170140534', '2.65'], [8, 'N5517032', '1.51'], [8, 'N5517042', '1.51'], [8, 'N5517056', '1.51'], [8, 'N5517083', '1.51'], [8, 'N5517084', '1.51'], [8, 'N5517085', '1.51'], [8, 'N55171003', '1.51'], [8, 'N5517136', '1.51'], [8, 'N5517028', '1.51'], [8, 'N5517055', '1.51'], [8, 'N5517610', '1.51'], [8, 'N5517613', '1.51'], [8, 'N5517614', '1.51'], [8, 'N5517615', '1.51'], [8, 'N5517073', '1.51'], [8, 'N5517589', '1.51'], [8, '05170020095', '1.51'], [8, 'N5517857', '1.51'], [8, '05170020131', '1.51'], [8, '05170020137', '1.51'], [8, '05170020184', '1.51'], [8, '05170020189', '1.51'], [8, '05170020097', '1.51'], [8, '05170020098', '1.51'], [8, '05170020099', '1.51'], [8, '05170020100', '1.51'], [8, '04170150035', '1.51'], [8, '04170150084', '1.51'], [8, '05170020082', '1.51'], [8, '05170020084', '1.51'], [8, '05170020086', '1.51'], [8, '05170020087', '1.51'], [8, '05170020091', '1.51'], [8, '05170020092', '1.51'], [8, '07170250399', '1.51'], [8, '07170250453', '1.51'], [8, '04170150044', '1.51'], [8, '05170020088', '1.51'], [8, '05170020090', '1.51'], [8, '05170020093', '1.51'], [8, '05170020103', '1.51'], [8, '05170020105', '1.51'], [8, '05170020107', '1.51'], [8, '05170020110', '1.51'], [9, 'J55172798', '15.79'], [9, 'J55173309', '15.79'], [9, 'DME55173036', '15.79'], [9, 'DME55173037', '15.79'], [9, 'DME55173200', '15.79'], [9, 'N5517569', '15.79'], [9, '05170020166', '15.79']]),
        ('CASE/PS6/HOSP22G146659/CK7323761', 'Hospital Initiated', '12/07/2025 23:17:12', 'SICS with non-foldable IOL', [[1, '11170010478', '3.16'], [1, '66170010344', '3.16'], [1, '04170140656', '3.16'], [1, '09530010327', '3.16'], [1, '02530010055', '3.16'], [1, '04170140099', '3.16'], [1, '66170010023', '3.16'], [2, '05170011289', '15.47'], [2, '05170040053', '15.47'], [2, 'DME55173201', '15.47'], [2, '05530010026', '15.47'], [2, '05530010031', '15.47'], [2, '05530010065', '15.47'], [2, '05530010079', '15.47'], [2, 'DME55172439', '15.47'], [2, '04170140518', '15.47'], [2, '05530010013', '15.47'], [2, 'DME55172441', '15.47'], [2, 'DME55173188', '15.47'], [2, 'DME55173185', '15.47'], [2, '05530010029', '15.47'], [3, '04170150173', '2.49'], [3, 'J55172863', '2.49'], [3, 'N5517593', '2.49'], [3, '05170010396', '2.49'], [3, '05170020193', '2.49'], [3, '05170020054', '2.49'], [3, 'AI55170024', '2.49'], [3, 'AI55170030', '2.49'], [3, '03170010366', '2.49'], [3, '05170020117', '2.49'], [3, '05170060099', '2.49'], [3, '06170050083', '2.49'], [3, '07170021387', '2.49'], [3, '09170010257', '2.49'], [3, '09530010377', '2.49'], [3, '05170011797', '2.49'], [4, '05170020187', '198.9'], [4, '05170020043', '198.9'], [4, '05170020182', '198.9'], [4, '05530010028', '198.9'], [4, '05530010030', '198.9'], [7, '15170200084', '2.65'], [7, '19170040056', '2.65'], [7, 'AI55170022', '2.65'], [7, 'AI55170026', '2.65'], [7, 'N5517599', '2.65'], [7, '05170020059', '2.65'], [7, '06170010814', '2.65'], [7, '02170280014', '2.65'], [7, '11170010433', '2.65'], [7, 'N5517866', '2.65'], [7, '05170020063', '2.65'], [7, '66170010273', '2.65'], [7, '66170020530', '2.65'], [7, '66170020641', '2.65'], [7, '66170020668', '2.65'], [7, '66170020533', '2.65'], [7, '66170020614', '2.65'], [7, '05170020133', '2.65'], [7, '04170120033', '2.65'], [7, 'N5517809', '2.65'], [7, 'N5517860', '2.65'], [7, 'N0517353', '2.65'], [7, 'N5517515', '2.65'], [7, '04170060068', '2.65'], [7, '04170140331', '2.65'], [7, '04170140436', '2.65'], [7, '04170140447', '2.65'], [7, '04170150162', '2.65'], [7, '05170020124', '2.65'], [7, '05170020142', '2.65'], [7, '05170020143', '2.65'], [7, '05170020150', '2.65'], [7, '05170020153', '2.65'], [7, '05170020161', '2.65'], [7, '05170020178', '2.65'], [7, '05170040078', '2.65'], [7, '08170040064', '2.65'], [7, '09170160077', '2.65'], [7, '12170050188', '2.65'], [7, '14170011702', '2.65'], [7, '15170200036', '2.65'], [7, '15170200090', '2.65'], [7, '22170040038', '2.65'], [7, '05170050074', '2.65'], [7, '0617009003', '2.65'], [7, '23170020062', '2.65'], [7, 'N5517989', '2.65'], [7, 'N5517990', '2.65'], [7, '05170011626', '2.65'], [7, '04170140534', '2.65'], [8, 'N5517032', '1.51'], [8, 'N5517042', '1.51'], [8, 'N5517056', '1.51'], [8, 'N5517083', '1.51'], [8, 'N5517084', '1.51'], [8, 'N5517085', '1.51'], [8, 'N55171003', '1.51'], [8, 'N5517136', '1.51'], [8, 'N5517028', '1.51'], [8, 'N5517055', '1.51'], [8, 'N5517610', '1.51'], [8, 'N5517613', '1.51'], [8, 'N5517614', '1.51'], [8, 'N5517615', '1.51'], [8, 'N5517073', '1.51'], [8, 'N5517589', '1.51'], [8, '05170020095', '1.51'], [8, 'N5517857', '1.51'], [8, '05170020131', '1.51'], [8, '05170020137', '1.51'], [8, '05170020184', '1.51'], [8, '05170020189', '1.51'], [8, '05170020097', '1.51'], [8, '05170020098', '1.51'], [8, '05170020099', '1.51'], [8, '05170020100', '1.51'], [8, '04170150035', '1.51'], [8, '04170150084', '1.51'], [8, '05170020082', '1.51'], [8, '05170020084', '1.51'], [8, '05170020086', '1.51'], [8, '05170020087', '1.51'], [8, '05170020091', '1.51'], [8, '05170020092', '1.51'], [8, '07170250399', '1.51'], [8, '07170250453', '1.51'], [8, '04170150044', '1.51'], [8, '05170020088', '1.51'], [8, '05170020090', '1.51'], [8, '05170020093', '1.51'], [8, '05170020103', '1.51'], [8, '05170020105', '1.51'], [8, '05170020107', '1.51'], [8, '05170020110', '1.51'], [9, 'J55172798', '15.79'], [9, 'J55173309', '15.79'], [9, 'DME55173036', '15.79'], [9, 'DME55173037', '15.79'], [9, 'DME55173200', '15.79'], [9, 'N5517569', '15.79'], [9, '05170020166', '15.79']]),
        ('CASE/PS6/HOSP22G146659/CK7323554', 'Hospital Initiated', '12/07/2025 23:15:51', 'SICS with non-foldable IOL', [[1, '11170010478', '3.16'], [1, '66170010344', '3.16'], [1, '04170140656', '3.16'], [1, '09530010327', '3.16'], [1, '02530010055', '3.16'], [1, '04170140099', '3.16'], [1, '66170010023', '3.16'], [2, '05170011289', '15.47'], [2, '05170040053', '15.47'], [2, 'DME55173201', '15.47'], [2, '05530010026', '15.47'], [2, '05530010031', '15.47'], [2, '05530010065', '15.47'], [2, '05530010079', '15.47'], [2, 'DME55172439', '15.47'], [2, '04170140518', '15.47'], [2, '05530010013', '15.47'], [2, 'DME55172441', '15.47'], [2, 'DME55173188', '15.47'], [2, 'DME55173185', '15.47'], [2, '05530010029', '15.47'], [3, '04170150173', '2.49'], [3, 'J55172863', '2.49'], [3, 'N5517593', '2.49'], [3, '05170010396', '2.49'], [3, '05170020193', '2.49'], [3, '05170020054', '2.49'], [3, 'AI55170024', '2.49'], [3, 'AI55170030', '2.49'], [3, '03170010366', '2.49'], [3, '05170020117', '2.49'], [3, '05170060099', '2.49'], [3, '06170050083', '2.49'], [3, '07170021387', '2.49'], [3, '09170010257', '2.49'], [3, '09530010377', '2.49'], [3, '05170011797', '2.49'], [4, '05170020187', '198.9'], [4, '05170020043', '198.9'], [4, '05170020182', '198.9'], [4, '05530010028', '198.9'], [4, '05530010030', '198.9'], [7, '15170200084', '2.65'], [7, '19170040056', '2.65'], [7, 'AI55170022', '2.65'], [7, 'AI55170026', '2.65'], [7, 'N5517599', '2.65'], [7, '05170020059', '2.65'], [7, '06170010814', '2.65'], [7, '02170280014', '2.65'], [7, '11170010433', '2.65'], [7, 'N5517866', '2.65'], [7, '05170020063', '2.65'], [7, '66170010273', '2.65'], [7, '66170020530', '2.65'], [7, '66170020641', '2.65'], [7, '66170020668', '2.65'], [7, '66170020533', '2.65'], [7, '66170020614', '2.65'], [7, '05170020133', '2.65'], [7, '04170120033', '2.65'], [7, 'N5517809', '2.65'], [7, 'N5517860', '2.65'], [7, 'N0517353', '2.65'], [7, 'N5517515', '2.65'], [7, '04170060068', '2.65'], [7, '04170140331', '2.65'], [7, '04170140436', '2.65'], [7, '04170140447', '2.65'], [7, '04170150162', '2.65'], [7, '05170020124', '2.65'], [7, '05170020142', '2.65'], [7, '05170020143', '2.65'], [7, '05170020150', '2.65'], [7, '05170020153', '2.65'], [7, '05170020161', '2.65'], [7, '05170020178', '2.65'], [7, '05170040078', '2.65'], [7, '08170040064', '2.65'], [7, '09170160077', '2.65'], [7, '12170050188', '2.65'], [7, '14170011702', '2.65'], [7, '15170200036', '2.65'], [7, '15170200090', '2.65'], [7, '22170040038', '2.65'], [7, '05170050074', '2.65'], [7, '0617009003', '2.65'], [7, '23170020062', '2.65'], [7, 'N5517989', '2.65'], [7, 'N5517990', '2.65'], [7, '05170011626', '2.65'], [7, '04170140534', '2.65'], [8, 'N5517032', '1.51'], [8, 'N5517042', '1.51'], [8, 'N5517056', '1.51'], [8, 'N5517083', '1.51'], [8, 'N5517084', '1.51'], [8, 'N5517085', '1.51'], [8, 'N55171003', '1.51'], [8, 'N5517136', '1.51'], [8, 'N5517028', '1.51'], [8, 'N5517055', '1.51'], [8, 'N5517610', '1.51'], [8, 'N5517613', '1.51'], [8, 'N5517614', '1.51'], [8, 'N5517615', '1.51'], [8, 'N5517073', '1.51'], [8, 'N5517589', '1.51'], [8, '05170020095', '1.51'], [8, 'N5517857', '1.51'], [8, '05170020131', '1.51'], [8, '05170020137', '1.51'], [8, '05170020184', '1.51'], [8, '05170020189', '1.51'], [8, '05170020097', '1.51'], [8, '05170020098', '1.51'], [8, '05170020099', '1.51'], [8, '05170020100', '1.51'], [8, '04170150035', '1.51'], [8, '04170150084', '1.51'], [8, '05170020082', '1.51'], [8, '05170020084', '1.51'], [8, '05170020086', '1.51'], [8, '05170020087', '1.51'], [8, '05170020091', '1.51'], [8, '05170020092', '1.51'], [8, '07170250399', '1.51'], [8, '07170250453', '1.51'], [8, '04170150044', '1.51'], [8, '05170020088', '1.51'], [8, '05170020090', '1.51'], [8, '05170020093', '1.51'], [8, '05170020103', '1.51'], [8, '05170020105', '1.51'], [8, '05170020107', '1.51'], [8, '05170020110', '1.51'], [9, 'J55172798', '15.79'], [9, 'J55173309', '15.79'], [9, 'DME55173036', '15.79'], [9, 'DME55173037', '15.79'], [9, 'DME55173200', '15.79'], [9, 'N5517569', '15.79'], [9, '05170020166', '15.79']])
        ]
    ]    """

    SQL_PATH = r'G:\My Drive\GdrivePC\Hospital\RSBY\New\incentiveDatabase_2.db'
    conn = sqlite3.connect(SQL_PATH)
    cursor = conn.cursor()

    # Begin transaction
    conn.execute('BEGIN')

    # Step 1: Collect unique case numbers
    case_meta = {}  # case_meta= {'CASE/PS5/HOSP22G146659/CK5222125': ('Hospital Initiated', '16/07/2025 19:22:54', 'SICS with non-foldable IOL'),
    # case_number_text, status_text, procedure_text, last_updated_text, list_of_list
    for case_number, status,  updated, proc, dist_list in success_list:
        case_meta[case_number] = ( updated, proc, status )

    # print(f"case_meta=", case_meta)
    # print('lem case meta', len(case_meta))

    # Step 2: Fetch existing case_number IDs
    cursor.execute(f'''
            SELECT case_number, id_case_num FROM case_num_t
            WHERE case_number IN ({",".join("?" * len(case_meta))})
        ''', list(case_meta.keys()))
    existing_ids = dict(cursor.fetchall())


    # ColourPrint.print_blue("*"*55)
    # print('existing ids')
    # print(existing_ids)
    # print('len existing ids')
    # print(len(existing_ids))
    # ColourPrint.print_blue("*"*55)

    # Step 3: Insert missing case headers
    missing_cases = [cn for cn in case_meta if cn not in existing_ids]
    print('missing_cases', missing_cases)
    if missing_cases:
        "sqlite3 database_2  table sequence in case num table" "id_case_num, case_number, updated_time, inc_procedure, inc_status"
        # case_meta = {'CASE/PS5/HOSP22G146659/CK5222125': ('16/07/2025 19:22:54', 'SICS with non-foldable IOL', 'Hospital Initiated'),

        # insert_meta = updating sequentially the case_number, updated_time, inc_procedure, inc_status
        insert_meta = [(cn, case_meta[cn][0], case_meta[cn][1], case_meta[cn][2]) for cn in missing_cases ]

        cursor.executemany('''
                    INSERT INTO case_num_t (case_number, updated_time, inc_procedure, inc_status)
                    VALUES (?, ?, ?, ?)
                ''', insert_meta)

        # Fetch newly inserted IDs
        cursor.execute(f'''
                   SELECT case_number, id_case_num FROM case_num_t
                   WHERE case_number IN ({",".join("?" * len(missing_cases))})
               ''', missing_cases)
        existing_ids.update(dict(cursor.fetchall()))
        # print(existing_ids)

        # Step 4: Delete old distributions in bulk
        all_case_ids = list(existing_ids.values())
        if all_case_ids:
            cursor.execute(f'''
                    DELETE FROM distribution_t WHERE d_case_num IN ({','.join('?' * len(all_case_ids))})
                ''', all_case_ids)

        # Step 4.1
        cursor.execute('SELECT code_emp, SN FROM emp_detail_t')
        emp_map = dict(cursor.fetchall())  # {code_emp: SN}

        # Step 5: Build master distribution list
        master_distribution_list = []
        for case_number, _, _, _, dist_list in success_list:
            case_id = existing_ids[case_number]
            for category, emp_code, amount in dist_list:
                emp_id = emp_map.get(emp_code)
                if emp_id is None:
                    raise ValueError(f"Employee code not found: {emp_code}")
                # Prepare data for batch insertion distribution_data.append((case_num_id, category_number, emp_id, incentive_amount))
                master_distribution_list.append((case_id, category, emp_id, amount))

        # Step 6: Insert all distribution records at once
        cursor.executemany('''
            INSERT INTO distribution_t (d_case_num, d_emp_categ, d_emp_code, d_inc_amt)
            VALUES (?, ?, ?, ?)
        ''', master_distribution_list)

        # Step 7: Update meta fields
        case_updates = [(updated, proc, status, case_num) for case_num, (updated, proc, status) in case_meta.items()]
        cursor.executemany('''
                UPDATE case_num_t
                SET updated_time = ?, inc_procedure = ?, inc_status = ?
                WHERE case_number = ?
            ''', case_updates)

        # Final commit
        conn.commit()
        conn.close()